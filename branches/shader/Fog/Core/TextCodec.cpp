// [Fog-Core Library - Public API]
//
// [License]
// MIT, See COPYING file in package

// [Precompiled Headers]
#if defined(FOG_PRECOMP)
#include FOG_PRECOMP
#endif // FOG_PRECOMP

// [Dependencies]
#include <Fog/Core/Assert.h>
#include <Fog/Core/AutoLock.h>
#include <Fog/Core/Byte.h>
#include <Fog/Core/ByteArray.h>
#include <Fog/Core/Constants.h>
#include <Fog/Core/Lock.h>
#include <Fog/Core/Math.h>
#include <Fog/Core/Memory.h>
#include <Fog/Core/Static.h>
#include <Fog/Core/String.h>
#include <Fog/Core/StringUtil.h>
#include <Fog/Core/TextCodec.h>
#include <Fog/Core/Thread.h>

#if !defined(FOG_OS_WINDOWS)
// for: nl_langinfo(CODESET)
#include <langinfo.h>
#else
// for: setlocale(LC_ALL, NULL)
#include <locale.h>
#endif

namespace Fog {

// [Fog::TextCodec]
void* TextCodec::_codecs[TextCodec::BuiltInCount];

// ============================================================================
// [Fog::TextCodec - Helpers]
// ============================================================================

static sysuint_t addToState(TextCodec::State* state, const uint8_t* cur, const uint8_t* end)
{
  FOG_ASSERT(state);
  FOG_ASSERT(state->count <= 8);

  sysuint_t curSize = state->count;
  sysuint_t bufSize = Math::min((sysuint_t)(end - cur), 8 - curSize);

  memcpy(state->buffer + curSize, cur, bufSize);
  state->count += (uint32_t)bufSize;

  return state->count;
}

static err_t defaultReplacer(ByteArray& dst, uint32_t uc)
{
  return dst.format("(u%X)", uc);
}

// ============================================================================
// [Fog::TextCodec - Engine]
// ============================================================================

TextCodec::Engine::Engine(
  uint32_t _code, uint32_t _flags, const char* _mime, const Page8* _page8)
{
  refCount.init(1);
  code = _code;
  flags = _flags;
  mime = _mime;
  page8 = _page8;
}

TextCodec::Engine::~Engine()
{
}

// ============================================================================
// [Fog::TextCodec - NullCodec]
// ============================================================================

struct FOG_HIDDEN NullCodec : public TextCodec::Engine
{
  NullCodec(uint32_t code, uint32_t flags, const char* mime) : TextCodec::Engine(code, flags, mime, NULL) {}

  virtual err_t appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const;
  virtual err_t appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const;
};

err_t NullCodec::appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  return ERR_STRING_INVALID_CODEC;
}

err_t NullCodec::appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
  return ERR_STRING_INVALID_CODEC;
}

static TextCodec::Engine* NullCodec_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new(std::nothrow) NullCodec(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - _8BitCodec]
// ============================================================================

static const uint16_t TextCodec_Table_ISO_8859_1[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

static const uint16_t TextCodec_Table_ISO_8859_2[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x02D8, 0x0141, 0x00A4, 0x013D, 0x015A, 0x00A7,
  0x00A8, 0x0160, 0x015E, 0x0164, 0x0179, 0x00AD, 0x017D, 0x017B,
  0x00B0, 0x0105, 0x02DB, 0x0142, 0x00B4, 0x013E, 0x015B, 0x02C7,
  0x00B8, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C,
  0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
  0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
  0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
  0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
  0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
  0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
};

static const uint16_t TextCodec_Table_ISO_8859_3[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0126, 0x02D8, 0x00A3, 0x00A4, 0xFFFD, 0x0124, 0x00A7,
  0x00A8, 0x0130, 0x015E, 0x011E, 0x0134, 0x00AD, 0xFFFD, 0x017B,
  0x00B0, 0x0127, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x0125, 0x00B7,
  0x00B8, 0x0131, 0x015F, 0x011F, 0x0135, 0x00BD, 0xFFFD, 0x017C,
  0x00C0, 0x00C1, 0x00C2, 0xFFFD, 0x00C4, 0x010A, 0x0108, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0xFFFD, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x0120, 0x00D6, 0x00D7,
  0x011C, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x016C, 0x015C, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0xFFFD, 0x00E4, 0x010B, 0x0109, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0xFFFD, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x0121, 0x00F6, 0x00F7,
  0x011D, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x016D, 0x015D, 0x02D9
};

static const uint16_t TextCodec_Table_ISO_8859_4[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x0138, 0x0156, 0x00A4, 0x0128, 0x013B, 0x00A7,
  0x00A8, 0x0160, 0x0112, 0x0122, 0x0166, 0x00AD, 0x017D, 0x00AF,
  0x00B0, 0x0105, 0x02DB, 0x0157, 0x00B4, 0x0129, 0x013C, 0x02C7,
  0x00B8, 0x0161, 0x0113, 0x0123, 0x0167, 0x014A, 0x017E, 0x014B,
  0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x012A,
  0x0110, 0x0145, 0x014C, 0x0136, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x0168, 0x016A, 0x00DF,
  0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x012B,
  0x0111, 0x0146, 0x014D, 0x0137, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x0169, 0x016B, 0x02D9
};

static const uint16_t TextCodec_Table_ISO_8859_5[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407,
  0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F,
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
  0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457,
  0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00A7, 0x045E, 0x045F
};

static const uint16_t TextCodec_Table_ISO_8859_6[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0xFFFD, 0xFFFD, 0xFFFD, 0x00A4, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x060C, 0x00AD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0x061B, 0xFFFD, 0xFFFD, 0xFFFD, 0x061F,
  0xFFFD, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
  0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
  0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637,
  0x0638, 0x0639, 0x063A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647,
  0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F,
  0x0650, 0x0651, 0x0652, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_7[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x2018, 0x2019, 0x00A3, 0xFFFD, 0xFFFD, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0xFFFD, 0x00AB, 0x00AC, 0x00AD, 0xFFFD, 0x2015,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x0385, 0x0386, 0x00B7,
  0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
  0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
  0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
  0x03A0, 0x03A1, 0xFFFD, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
  0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
  0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
  0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
  0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
  0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_8[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0xFFFD, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x203E,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2017,
  0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
  0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
  0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
  0x05E8, 0x05E9, 0x05EA, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_9[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
};

static const uint16_t TextCodec_Table_ISO_8859_10[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x0112, 0x0122, 0x012A, 0x0128, 0x0136, 0x00A7,
  0x013B, 0x0110, 0x0160, 0x0166, 0x017D, 0x00AD, 0x016A, 0x014A,
  0x00B0, 0x0105, 0x0113, 0x0123, 0x012B, 0x0129, 0x0137, 0x00B7,
  0x013C, 0x0111, 0x0161, 0x0167, 0x017E, 0x2015, 0x016B, 0x014B,
  0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x00CF,
  0x00D0, 0x0145, 0x014C, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x0168,
  0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
  0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x00EF,
  0x00F0, 0x0146, 0x014D, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x0169,
  0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x0138
};

static const uint16_t TextCodec_Table_ISO_8859_11[128] =
{
  0x20AC, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2026, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
  0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
  0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
  0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
  0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
  0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
  0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
  0x0E38, 0x0E39, 0x0E3A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x0E3F,
  0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
  0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
  0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
  0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_ISO_8859_13[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7,
  0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7,
  0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
  0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
  0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
  0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
  0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
  0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
  0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
  0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
  0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019
};

static const uint16_t TextCodec_Table_ISO_8859_14[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x1E02, 0x1E03, 0x00A3, 0x010A, 0x010B, 0x1E0A, 0x00A7,
  0x1E80, 0x00A9, 0x1E82, 0x1E0B, 0x1EF2, 0x00AD, 0x00AE, 0x0178,
  0x1E1E, 0x1E1F, 0x0120, 0x0121, 0x1E40, 0x1E41, 0x00B6, 0x1E56,
  0x1E81, 0x1E57, 0x1E83, 0x1E60, 0x1EF3, 0x1E84, 0x1E85, 0x1E61,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x0174, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x1E6A,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x0176, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x0175, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x1E6B,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x0177, 0x00FF
};

static const uint16_t TextCodec_Table_ISO_8859_16[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x0104, 0x0105, 0x0141, 0x20AC, 0x201E, 0x0160, 0x00A7,
  0x0161, 0x00A9, 0x0218, 0x00AB, 0x0179, 0x00AD, 0x017A, 0x017B,
  0x00B0, 0x00B1, 0x010C, 0x0142, 0x017D, 0x201D, 0x00B6, 0x00B7,
  0x017E, 0x010D, 0x0219, 0x00BB, 0x0152, 0x0153, 0x0178, 0x017C,
  0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0106, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x0110, 0x0143, 0x00D2, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x015A,
  0x0170, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0118, 0x021A, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x0107, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x0111, 0x0144, 0x00F2, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x015B,
  0x0171, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0119, 0x021B, 0x00FF
};

static const uint16_t TextCodec_Table_CP_850[128] =
{
  0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
  0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
  0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
  0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
  0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
  0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
  0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
  0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
  0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
  0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
  0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE,
  0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
  0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
  0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
  0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
  0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};

static const uint16_t TextCodec_Table_CP_866[128] =
{
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
  0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
  0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
  0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
  0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
  0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
  0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
  0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E,
  0x00B0, 0x2219, 0x00B7, 0x221A, 0x2116, 0x00A4, 0x25A0, 0x00A0
};

static const uint16_t TextCodec_Table_CP_874[128] =
{
  0x20AC, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2026, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
  0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
  0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
  0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
  0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
  0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
  0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
  0x0E38, 0x0E39, 0x0E3A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x0E3F,
  0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
  0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
  0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
  0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD
};

static const uint16_t TextCodec_Table_CP_1250[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0xFFFD, 0x201E, 0x2026, 0x2020, 0x2021,
  0xFFFD, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
  0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
  0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
  0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
  0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
  0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
  0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
  0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
  0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
  0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
  0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
};

static const uint16_t TextCodec_Table_CP_1251[128] =
{
  0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
  0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
  0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
  0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
  0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
  0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
  0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
  0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
  0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
  0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
  0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
  0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
  0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
  0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
  0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
};

static const uint16_t TextCodec_Table_CP_1252[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0xFFFD, 0x017D, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0xFFFD, 0x017E, 0x0178,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

static const uint16_t TextCodec_Table_CP_1253[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0xFFFD, 0x2030, 0xFFFD, 0x2039, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0xFFFD, 0x203A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x0385, 0x0386, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0xFFFD, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x2015,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x00B5, 0x00B6, 0x00B7,
  0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
  0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
  0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
  0x03A0, 0x03A1, 0xFFFD, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
  0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
  0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
  0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
  0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
  0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0xFFFD
};

static const uint16_t TextCodec_Table_CP_1254[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0xFFFD, 0xFFFD, 0x0178,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
};

static const uint16_t TextCodec_Table_CP_1255[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0xFFFD, 0x2039, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0xFFFD, 0x203A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x20AA, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7,
  0x05B8, 0x05B9, 0xFFFD, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF,
  0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05F0, 0x05F1, 0x05F2, 0x05F3,
  0x05F4, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
  0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
  0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
  0x05E8, 0x05E9, 0x05EA, 0xFFFD, 0xFFFD, 0x200E, 0x200F, 0xFFFD
};

static const uint16_t TextCodec_Table_CP_1256[128] =
{
  0x20AC, 0x067E, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0x0679, 0x2039, 0x0152, 0x0686, 0x0698, 0x0688,
  0x06AF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x06A9, 0x2122, 0x0691, 0x203A, 0x0153, 0x200C, 0x200D, 0x06BA,
  0x00A0, 0x060C, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x06BE, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x061B, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x061F,
  0x06C1, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
  0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
  0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00D7,
  0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0641, 0x0642, 0x0643,
  0x00E0, 0x0644, 0x00E2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0649, 0x064A, 0x00EE, 0x00EF,
  0x064B, 0x064C, 0x064D, 0x064E, 0x00F4, 0x064F, 0x0650, 0x00F7,
  0x0651, 0x00F9, 0x0652, 0x00FB, 0x00FC, 0x200E, 0x200F, 0x06D2
};

static const uint16_t TextCodec_Table_CP_1257[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0xFFFD, 0x201E, 0x2026, 0x2020, 0x2021,
  0xFFFD, 0x2030, 0xFFFD, 0x2039, 0xFFFD, 0x00A8, 0x02C7, 0x00B8,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0xFFFD, 0x2122, 0xFFFD, 0x203A, 0xFFFD, 0x00AF, 0x02DB, 0xFFFD,
  0x00A0, 0xFFFD, 0x00A2, 0x00A3, 0x00A4, 0xFFFD, 0x00A6, 0x00A7,
  0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
  0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
  0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
  0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
  0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
  0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
  0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
  0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
  0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9
};

static const uint16_t TextCodec_Table_CP_1258[128] =
{
  0x20AC, 0xFFFD, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
  0x02C6, 0x2030, 0xFFFD, 0x2039, 0x0152, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x02DC, 0x2122, 0xFFFD, 0x203A, 0x0153, 0xFFFD, 0xFFFD, 0x0178,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x0300, 0x00CD, 0x00CE, 0x00CF,
  0x0110, 0x00D1, 0x0309, 0x00D3, 0x00D4, 0x01A0, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x01AF, 0x0303, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0301, 0x00ED, 0x00EE, 0x00EF,
  0x0111, 0x00F1, 0x0323, 0x00F3, 0x00F4, 0x01A1, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x01B0, 0x20AB, 0x00FF
};

static const uint16_t TextCodec_Table_APPLE_ROMAN[128] =
{
  0x00C4, 0x00C5, 0x00C7, 0x00C9, 0x00D1, 0x00D6, 0x00DC, 0x00E1,
  0x00E0, 0x00E2, 0x00E4, 0x00E3, 0x00E5, 0x00E7, 0x00E9, 0x00E8,
  0x00EA, 0x00EB, 0x00ED, 0x00EC, 0x00EE, 0x00EF, 0x00F1, 0x00F3,
  0x00F2, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x00F9, 0x00FB, 0x00FC,
  0x2020, 0x00B0, 0x00A2, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF,
  0x00AE, 0x00A9, 0x2122, 0x00B4, 0x00A8, 0x2260, 0x00C6, 0x00D8,
  0x221E, 0x00B1, 0x2264, 0x2265, 0x00A5, 0x00B5, 0x2202, 0x2211,
  0x220F, 0x03C0, 0x222B, 0x00AA, 0x00BA, 0x03A9, 0x00E6, 0x00F8,
  0x00BF, 0x00A1, 0x00AC, 0x221A, 0x0192, 0x2248, 0x2206, 0x00AB,
  0x00BB, 0x2026, 0x00A0, 0x00C0, 0x00C3, 0x00D5, 0x0152, 0x0153,
  0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA,
  0x00FF, 0x0178, 0x2044, 0x20AC, 0x2039, 0x203A, 0xFB01, 0xFB02,
  0x2021, 0x00B7, 0x201A, 0x201E, 0x2030, 0x00C2, 0x00CA, 0x00C1,
  0x00CB, 0x00C8, 0x00CD, 0x00CE, 0x00CF, 0x00CC, 0x00D3, 0x00D4,
  0xF8FF, 0x00D2, 0x00DA, 0x00DB, 0x00D9, 0x0131, 0x02C6, 0x02DC,
  0x00AF, 0x02D8, 0x02D9, 0x02DA, 0x00B8, 0x02DD, 0x02DB, 0x02C7
};

static const uint16_t TextCodec_Table_KOI8R[128] =
{
  0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524,
  0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
  0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219 /* or 0x2022 ? */, 0x221A, 0x2248,
  0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
  0x2550, 0x2551, 0x2552, 0x0451, 0x2553, 0x2554, 0x2555, 0x2556,
  0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x255C, 0x255D, 0x255E,
  0x255F, 0x2560, 0x2561, 0x0401, 0x2562, 0x2563, 0x2564, 0x2565,
  0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x256B, 0x256C, 0x00A9,
  0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
  0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
  0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432,
  0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A,
  0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
  0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
  0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412,
  0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A
};

static const uint16_t TextCodec_Table_KOI8U[128] =
{
  0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524,
  0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
  0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219, 0x221A, 0x2248,
  0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
  0x2550, 0x2551, 0x2552, 0x0451, 0x0454, 0x2554, 0x0456, 0x0457,
  0x2557, 0x2558, 0x2559, 0x255A, 0x255B, 0x0491, 0x255D, 0x255E,
  0x255F, 0x2560, 0x2561, 0x0401, 0x0404, 0x2563, 0x0406, 0x0407,
  0x2566, 0x2567, 0x2568, 0x2569, 0x256A, 0x0490, 0x256C, 0x00A9,
  0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433,
  0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E,
  0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432,
  0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A,
  0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413,
  0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E,
  0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412,
  0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A
};

static const uint16_t TextCodec_Table_WINSAMI_2[128] =
{
  0x20AC, 0xFFFD, 0x010C, 0x0192, 0x010D, 0x01B7, 0x0292, 0x01EE,
  0x01EF, 0x0110, 0x0160, 0x2039, 0x0152, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
  0x0111, 0x01E6, 0x0161, 0x203A, 0x0153, 0xFFFD, 0xFFFD, 0x0178,
  0x00A0, 0x01E7, 0x01E4, 0x00A3, 0x00A4, 0x01E5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x021E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x021F,
  0x00B0, 0x00B1, 0x01E8, 0x01E9, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x014A, 0x014B, 0x0166, 0x00BB, 0x0167, 0x00BD, 0x017D, 0x017E,
  0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
  0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
  0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
  0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
  0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
  0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
  0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

static const uint16_t TextCodec_Table_ROMAN_8[128] =
{
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
  0x00A0, 0x00C0, 0x00C2, 0x00C8, 0x00CA, 0x00CB, 0x00CE, 0x00CF,
  0x00B4, 0x02CB, 0x02C6, 0x00A8, 0x02DC, 0x00D9, 0x00DB, 0x20A4,
  0x00AF, 0x00DD, 0x00FD, 0x00B0, 0x00C7, 0x00E7, 0x00D1, 0x00F1,
  0x00A1, 0x00BF, 0x00A4, 0x00A3, 0x00A5, 0x00A7, 0x0192, 0x00A2,
  0x00E2, 0x00EA, 0x00F4, 0x00FB, 0x00E1, 0x00E9, 0x00F3, 0x00FA,
  0x00E0, 0x00E8, 0x00F2, 0x00F9, 0x00E4, 0x00EB, 0x00F6, 0x00FC,
  0x00C5, 0x00EE, 0x00D8, 0x00C6, 0x00E5, 0x00ED, 0x00F8, 0x00E6,
  0x00C4, 0x00EC, 0x00D6, 0x00DC, 0x00C9, 0x00EF, 0x00DF, 0x00D4,
  0x00C1, 0x00C3, 0x00E3, 0x00D0, 0x00F0, 0x00CD, 0x00CC, 0x00D3,
  0x00D2, 0x00D5, 0x00F5, 0x0160, 0x0161, 0x00DA, 0x0178, 0x00FF,
  0x00DE, 0x00FE, 0x00B7, 0x00B5, 0x00B6, 0x00BE, 0x2014, 0x00BC,
  0x00BD, 0x00AA, 0x00BA, 0x00AB, 0x25A0, 0x00BB, 0x00B1, 0xFFFD
};

static const uint16_t TextCodec_Table_ARMSCII_8[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0xF0A1, 0x00A7, 0x0589, 0x0029, 0x0028, 0x00BB, 0x00AB,
  0x2014, 0x002E, 0x055D, 0x002C, 0x2010, 0x058A, 0x2026, 0x055C,
  0x055B, 0x055E, 0x0531, 0x0561, 0x0532, 0x0562, 0x0533, 0x0563,
  0x0534, 0x0564, 0x0535, 0x0565, 0x0536, 0x0566, 0x0537, 0x0567,
  0x0538, 0x0568, 0x0539, 0x0569, 0x053A, 0x056A, 0x053B, 0x056B,
  0x053C, 0x056C, 0x053D, 0x056D, 0x053E, 0x056E, 0x053F, 0x056F,
  0x0540, 0x0570, 0x0541, 0x0571, 0x0542, 0x0572, 0x0543, 0x0573,
  0x0544, 0x0574, 0x0545, 0x0575, 0x0546, 0x0576, 0x0547, 0x0577,
  0x0548, 0x0578, 0x0549, 0x0579, 0x054A, 0x057A, 0x054B, 0x057B,
  0x054C, 0x057C, 0x054D, 0x057D, 0x054E, 0x057E, 0x054F, 0x057F,
  0x0550, 0x0580, 0x0551, 0x0581, 0x0552, 0x0582, 0x0553, 0x0583,
  0x0554, 0x0584, 0x0555, 0x0585, 0x0556, 0x0586, 0x02BC, 0x0587
};

static const uint16_t TextCodec_Table_GEORGIAN_ACADEMY[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x10D0, 0x10D1, 0x10D2, 0x10D3, 0x10D4, 0x10D5, 0x10D6, 0x10D7,
  0x10D8, 0x10D9, 0x10DA, 0x10DB, 0x10DC, 0x10DD, 0x10DE, 0x10DF,
  0x10E0, 0x10E1, 0x10E2, 0x10E3, 0x10E4, 0x10E5, 0x10E6, 0x10E7,
  0x10E8, 0x10E9, 0x10EA, 0x10EB, 0x10EC, 0x10ED, 0x10EE, 0x10EF,
  0x10F0, 0x10F1, 0x10F2, 0x10F3, 0x10F4, 0x10F5, 0x10F6, 0x00AB,
  0x00BB, 0x2018, 0x2019, 0x201E, 0x201F, 0x00DD, 0x00DE, 0x00DF,
  0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

static const uint16_t TextCodec_Table_GEORGIAN_PS[128] =
{
  0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
  0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
  0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
  0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
  0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
  0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
  0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
  0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
  0x10D0, 0x10D1, 0x10D2, 0x10D3, 0x10D4, 0x10D5, 0x10D6, 0x10F1,
  0x10D7, 0x10D8, 0x10D9, 0x10DA, 0x10DB, 0x10DC, 0x10F2, 0x10DD,
  0x10DE, 0x10DF, 0x10E0, 0x10E1, 0x10E2, 0x10F3, 0x10E3, 0x10E4,
  0x10E5, 0x10E6, 0x10E7, 0x10E8, 0x10E9, 0x10EA, 0x10EB, 0x10EC,
  0x10ED, 0x10EE, 0x10F4, 0x10EF, 0x10F0, 0x10F5, 0x10F6, 0x00AB,
  0x00BB, 0x2018, 0x2019, 0x201E, 0x201F, 0x00DD, 0x00DE, 0x00DF,
  0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
  0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

static const TextCodec::Page8::Decode _8BitCodec_emptyDecoder =
{
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
};

struct FOG_HIDDEN _8BitCodec : public TextCodec::Engine
{
  _8BitCodec(uint32_t code, uint32_t flags, const char* mime, const Page8* page8);
  virtual ~_8BitCodec();

  virtual err_t appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const;
  virtual err_t appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const;
};

_8BitCodec::_8BitCodec(
  uint32_t code, uint32_t flags, const char* mime, const Page8* page8) 
    : TextCodec::Engine(code, flags, mime, page8)
{
}

_8BitCodec::~_8BitCodec()
{
  if (page8)
  {
    TextCodec::Page8::Decode* const* tables = page8->decode;

    for (sysuint_t i = 0; i != 256; i++)
    {
      if (tables[i] != &_8BitCodec_emptyDecoder) Memory::free(tables[i]);
    }

    Memory::free((void*)page8);
  }
}

err_t _8BitCodec::appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  // Length initialization and check.
  if (length == DETECT_LENGTH) length = StringUtil::len(src);
  if (length == 0) return ERR_OK;

  // Source buffer.
  const Char* srcCur = src;
  const Char* srcEnd = src + length;

  // Destination buffer.
  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = length + 1;

  err_t err = dst.grow(growSize);
  if (err) return err;

  uint8_t* dstCur = reinterpret_cast<uint8_t*>(dst.getXData()) + initSize;

  // Replacer.
  ByteArray replaceBuffer;
  if (replacer == NULL) replacer = defaultReplacer;

  // Characters.
  Char uc0;
  Char uc1;
  uint8_t ch;

  // 8 bit tables.
  TextCodec::Page8::Decode* const* table = page8->decode;

  if (state && state->count == 2)
  {
    uc0 = reinterpret_cast<uint16_t*>(state->buffer)[0];
    state->count = 0;
    goto surrogateTrail;
  }

loop:
  while (srcCur != srcEnd)
  {
    uc0 = *srcCur++;
    if (uc0.isLeadSurrogate())
    {
      // Incomplete surrogate pair.
      if (srcCur == srcEnd)
      {
        if (!state) { err = ERR_STRING_TRUNCATED; goto end; }
        reinterpret_cast<uint16_t*>(state->buffer)[0] = uc0;
        state->count = 2;
        goto end;
      }

surrogateTrail:
      uc1 = *srcCur++;
      if (!uc1.isTrailSurrogate()) { err = ERR_STRING_INVALID_UTF16; goto end; }

      err = replacer(replaceBuffer, Char::fromSurrogate(uc0, uc1));
      goto replace;
    }
    else
    {
      ch = table[uc0.ch() >> 8]->uc[uc0.ch() & 0xFF];
      if (ch == 0)
      {
        err = replacer(replaceBuffer, uc0);
        if (err) goto end;
replace:
        // Need to finalize dst, append and reserve for next appending.
        dst.xFinalize(reinterpret_cast<char*>(dstCur));

        if ((err = dst.append(Ascii8(replaceBuffer.getData(), replaceBuffer.getLength())))) return err;
        if ((err = dst.reserve(dst.getLength() + (sysuint_t)(srcEnd - srcCur)))) return err;

        dstCur = reinterpret_cast<uint8_t*>(dst.getXData()) + dst.getLength();
      }
      else
      {
        *dstCur++ = ch;
      }
    }
  }

end:
  dst.xFinalize(reinterpret_cast<char*>(dstCur));
  return err;
}

err_t _8BitCodec::appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
  // Source Buffer.
  if (size == DETECT_LENGTH) size = strlen(reinterpret_cast<const char*>(src));

  const uint8_t* srcCur = reinterpret_cast<const uint8_t*>(src);
  const uint8_t* srcEnd = srcCur + (size);

  // Destination Buffer.
  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = size + 1;

  err_t err = dst.grow(growSize);
  if (err) return err;

  Char* dstCur = dst.getXData() + initSize;

  // Characters.
  uint16_t uc;

  // 8 bit tables.
  const TextCodec::Page8::Encode* table = page8->encode;

  for (;;)
  {
    uc = *srcCur++;
    if (FOG_UNLIKELY(uc >= 128)) uc = table->uc[uc-128];
    *dstCur++ = uc;
    if (srcCur == srcEnd) break;
  }

  dst.xFinalize(dstCur);
  return ERR_OK;
}

static TextCodec::Engine* _8BitCodec_create(uint32_t code, uint32_t flags, const char* mime, void* table)
{
  const uint16_t* encode = (const uint16_t*)table;

  TextCodec::Page8* page8 = reinterpret_cast<TextCodec::Page8 *>(Memory::alloc(sizeof(TextCodec::Page8)));
  if (page8 == NULL) return NULL;

  page8->encode = (TextCodec::Page8::Encode*)encode;

  sysuint_t i;

  for (i = 0; i < 256; i++)
  {
    page8->decode[i] = (TextCodec::Page8::Decode*)&_8BitCodec_emptyDecoder;
  }

  for (i = 0; i < 256; i++)
  {
    uint32_t uc = (i < 128) ? (uint32_t)i : encode[i-128];
    uint32_t ucPage = uc >> 8;
    uint32_t ucIndex = uc & 0xFF;

    TextCodec::Page8::Decode* decode = (TextCodec::Page8::Decode*)page8->decode[ucPage];

    if (decode == &_8BitCodec_emptyDecoder)
    {
      page8->decode[ucPage] = decode = (TextCodec::Page8::Decode *)
        Memory::calloc(sizeof(TextCodec::Page8::Decode));
      if (page8->decode[ucPage] == NULL) goto fail;
    }

    decode->uc[ucIndex] = (uint8_t)i;
  }

  return new(std::nothrow) _8BitCodec(code, flags, mime, page8);

fail:
  // Silently destroy codec data and return NULL.
  for (i = 0; i < 256; i++)
  {
    if (page8->decode[i] != (TextCodec::Page8::Decode*)&_8BitCodec_emptyDecoder)
    {
      Memory::free(page8->decode[i]);
    }
  }

  Memory::free(page8);
  return NULL;
}

// ---------------------------------------------------------------------------
// [Fog::TextCodec - UTF8Codec]
// ---------------------------------------------------------------------------

struct FOG_HIDDEN UTF8Codec : public TextCodec::Engine
{
  UTF8Codec(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const;
  virtual err_t appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const;
};

UTF8Codec::UTF8Codec(uint32_t code, uint32_t flags, const char* mime) :
  TextCodec::Engine(code, flags, mime, NULL)
{
}

err_t UTF8Codec::appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  // Length initialization and check.
  if (length == DETECT_LENGTH) length = StringUtil::len(src);
  if (length == 0) return ERR_OK;

  // Source buffer.
  const Char* srcCur = src;
  const Char* srcEnd = src + length;

  // Destination buffer.
  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = (length * 3) + 4;

  err_t err = dst.grow(growSize);
  if (err) return err;

  uint8_t* dstCur = reinterpret_cast<uint8_t*>(dst.getXData()) + initSize;
  sysuint_t remain = dst.getCapacity() - initSize;

  // Characters.
  uint32_t uc;
  Char uc0;
  Char uc1;

  if (state && state->count == 2)
  {
    uc0 = reinterpret_cast<uint16_t*>(state->buffer)[0];
    state->count = 0;
    goto surrogateTrail;
  }

loop:
  while (srcCur != srcEnd)
  {
    uc0 = *srcCur++;
    if (uc0.isLeadSurrogate())
    {
      // Incomplete surrogate pair.
      if (srcCur == srcEnd)
      {
        if (!state) { err = ERR_STRING_TRUNCATED; goto end; }
        reinterpret_cast<uint16_t*>(state->buffer)[0] = uc0;
        state->count = 2;
        goto end;
      }

surrogateTrail:
      uc1 = *srcCur++;
      if (!uc1.isTrailSurrogate()) { err = ERR_STRING_INVALID_UTF16; goto end; }

      uc = Char::fromSurrogate(uc0, uc1);
    }
    else
    {
      uc = uc0;
    }

    // Check if dst needs to grow.
    if (remain < 4)
    {
      dst.xFinalize(reinterpret_cast<char*>(dstCur));
      initSize = dst.getLength();
      if ((err = dst.grow((sysuint_t)(srcEnd - srcCur) * 3 + 4))) goto end;

      dstCur = reinterpret_cast<uint8_t*>(dst.getXData()) + initSize;
      remain = dst.getCapacity() - dst.getLength();
    }

    if (uc < 0x80)
    {
      *dstCur++ = (uint8_t)uc;
      remain--;
    }
    else if (uc < 0x800)
    {
      dstCur[1] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0xC0;
      dstCur[0] = uc;
      dstCur += 2;
      remain -= 2;
    }
    else if (uc < 0x10000)
    {
      dstCur[2] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0x800;
      dstCur[1] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0xC0;
      dstCur[0] = uc;
      dstCur += 3;
      remain -= 3;
    }
    else if (uc < 0x200000)
    {
      dstCur[3] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0x10000;
      dstCur[2] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0x800;
      dstCur[1] = 0x80 | (uc & 0x3f); uc = (uc >> 6) | 0xC0;
      dstCur[0] = uc;
      dstCur += 4;
      remain -= 4;
    }
  }

end:
  dst.xFinalize(reinterpret_cast<char*>(dstCur));
  return err;
}

err_t UTF8Codec::appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
#define GET_UTF8_CHAR(__buffer__) \
  switch (utf8Size) \
  { \
    /* Invalid UTF-8 Sequence */ \
    case 0: \
      err = ERR_STRING_INVALID_UTF8; \
      goto end; \
    case 1: \
      break; \
    case 2: \
      uc = ((uc - 192U) << 6U) \
         | (uint32_t((__buffer__)[1]) - 128U); \
      break; \
    case 3: \
      /* Remove UTF8-BOM (EFBBBF) - We don't want it */ \
      if (uc == 0xEF && (__buffer__)[1] == 0xBB && (__buffer__)[2] == 0xBF) goto cont; \
      \
      uc = ((uc - 224U) << 12U) \
         | ((uint32_t((__buffer__)[1]) - 128U) << 6) \
         |  (uint32_t((__buffer__)[2]) - 128U); \
      break; \
    case 4: \
      uc = ((uc - 240U) << 24U) \
         | ((uint32_t((__buffer__)[1]) - 128U) << 12) \
         | ((uint32_t((__buffer__)[2]) - 128U) << 6) \
         |  (uint32_t((__buffer__)[3]) - 128U); \
      break; \
    default: \
      err = ERR_STRING_INVALID_UTF8; \
      goto end; \
  }

  // Length initialization and check.
  if (size == DETECT_LENGTH) size = StringUtil::len(reinterpret_cast<const char*>(src));
  if (size == 0) return ERR_OK;

  // Source Buffer.
  const uint8_t* srcCur = reinterpret_cast<const uint8_t*>(src);
  const uint8_t* srcEnd = srcCur + (size);

  // Destination Buffer.
  sysuint_t oldStateSize = 0;
  sysuint_t utf8Size;

  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = size + 1;
 
  err_t err = dst.reserve(growSize);
  if (err) return err;

  Char* dstCur = dst.getXData() + initSize;

  // Characters
  uint32_t uc;
 
  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = reinterpret_cast<uint8_t*>(state->buffer);
    sysuint_t bufSize = addToState(state, srcCur, srcEnd);

    uc = *bufPtr;
    utf8Size = utf8LengthTable[uc];

    // Incomplete Input, we are returning ERR_OK, because we know
    // that the state isn't NULL pointer. In all other cases TextCodec
    // should return InputTruncated.
    if (FOG_UNLIKELY(bufSize < utf8Size)) return ERR_OK;

    srcCur -= oldStateSize;
    state->count = 0;

    GET_UTF8_CHAR(bufPtr);
    goto code;
  }
 
loop:
  for (;;)
  {
    uc = *srcCur;
    utf8Size = utf8LengthTable[uc];
   
    // Incomplete Input
    if (FOG_UNLIKELY((sysuint_t)(srcEnd - srcCur) < utf8Size)) goto inputTruncated;

    GET_UTF8_CHAR(srcCur);
   
code:
    if (uc >= 0x10000U && uc <= UNICODE_LAST)
    {
      Char::toSurrogatePair(uc, &dstCur[0]._ch, &dstCur[1]._ch);
      dstCur += 2;
    }
    else if (Char::isSurrogatePair(uc) && uc >= 0xFFFE)
    {
      err = ERR_STRING_INVALID_CHAR;
      goto end;
    }
    else
    {
      *dstCur++ = (uint16_t)uc;
    }
   
cont:
    srcCur += utf8Size;
    if (srcCur == srcEnd) break;
  }
  goto end;
 
inputTruncated:
  // Different behavior if state is set or not.
  if (state)
  {
    sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
    memcpy(state->buffer, srcCur, bufSize);
    state->count = (uint32_t)bufSize;
  }
  else
  {
    err = ERR_STRING_TRUNCATED;
  }

end:
  dst.xFinalize(dstCur);
  return err;

#undef GET_UTF8_CHAR
}

static TextCodec::Engine* UTF8Codec_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new(std::nothrow) UTF8Codec(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - UTF16Codec]
// ============================================================================

struct FOG_HIDDEN UTF16Codec : public TextCodec::Engine
{
  UTF16Codec(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const;
  virtual err_t appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const;
};

UTF16Codec::UTF16Codec(uint32_t code, uint32_t flags, const char* mime) :
  TextCodec::Engine(code, flags, mime, NULL)
{
}

err_t UTF16Codec::appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  // Length initialization and check.
  if (length == DETECT_LENGTH) length = StringUtil::len(src);
  if (length == 0) return ERR_OK;

  // Source buffer.
  const Char* srcCur = src;
  const Char* srcEnd = src + length;

  // Destination buffer.
  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = (length * 2) + 2;

  err_t err = dst.reserve(growSize);
  if (err) return err;

  uint16_t* dstCur = reinterpret_cast<uint16_t*>(dst.getXData() + initSize);

  // Byte swapping.
  bool isByteSwapped = (flags & TextCodec::IsByteSwapped) != 0;

  // Characters.
  Char uc0;
  Char uc1;

  if (state && state->count == 2)
  {
    uc0 = reinterpret_cast<uint16_t*>(state->buffer)[0];
    state->count = 0;
    goto surrogateTrail;
  }

loop:
  while (srcCur != srcEnd)
  {
    uc0 = *srcCur++;
    if (uc0.isLeadSurrogate())
    {
      // Incomplete surrogate pair.
      if (srcCur == srcEnd)
      {
        if (!state) { err = ERR_STRING_TRUNCATED; goto end; }
        reinterpret_cast<uint16_t*>(state->buffer)[0] = uc0;
        state->count = 2;
        goto end;
      }

surrogateTrail:
      uc1 = *srcCur++;
      if (!uc1.isTrailSurrogate()) { err = ERR_STRING_INVALID_UTF16; goto end; }

      // Byte swapping.
      if (isByteSwapped) { uc0 = Memory::bswap16(uc0); uc1 = Memory::bswap16(uc1); }

      dstCur[0] = uc0;
      dstCur[1] = uc1;
      dstCur += 2;
    }
    else
    {
      // Byte swapping.
      if (isByteSwapped) { uc0 = Memory::bswap16(uc0); }

      *dstCur++ = uc0;
    }
  }

end:
  dst.xFinalize(reinterpret_cast<char*>(dstCur));
  return err;
}

err_t UTF16Codec::appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
  // Length initialization and check.
  if (size == DETECT_LENGTH) size = StringUtil::len(reinterpret_cast<const Char*>(src)) << 1;
  if (size == 0) return ERR_OK;

  // Source Buffer.
  const uint8_t* srcCur = reinterpret_cast<const uint8_t*>(src);
  const uint8_t* srcEnd = srcCur + (size);
  const uint8_t* srcEndM2 = srcCur + (size) - 2;

  // Destination Buffer.
  sysuint_t oldStateSize = 0;

  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = (size >> 1) + 2;

  err_t err = dst.reserve(growSize);
  if (err) return err;

  Char* dstCur = dst.getXData() + initSize;

  // Characters.
  Char uc0;
  Char uc1;

  // Byte swapping.
  uint32_t isByteSwapped = (state && state->bomInitialized) ? state->bomSwapped : (flags & TextCodec::IsByteSwapped) != 0;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = reinterpret_cast<uint8_t*>(state->buffer);
    sysuint_t bufSize = addToState(state, srcCur, srcEnd);

    if (state->count < 2) return ERR_OK;

    uc0 = reinterpret_cast<const uint16_t*>(bufPtr)[0];
    if (isByteSwapped) uc0.bswap();

    if (uc0.isLeadSurrogate())
    {
      if (state->count < 4) return ERR_OK;

      uc1 = reinterpret_cast<const uint16_t*>(bufPtr)[1];
      if (isByteSwapped) uc1.bswap();

      srcCur -= oldStateSize;
      state->count = 0;

      goto surrogatePair;
    }
    else
    {
      srcCur -= oldStateSize;
      state->count = 0;

      goto notSurrogatePair;
    }
  }

loop:
  for (;;)
  {
    if (srcCur > srcEndM2) break;

    uc0 = reinterpret_cast<const uint16_t*>(srcCur)[0];
    if (isByteSwapped) uc0.bswap();

    if (uc0.isLeadSurrogate())
    {
      if (srcCur + 2 > srcEndM2) break;

      uc1 = reinterpret_cast<const uint16_t*>(srcCur)[1];
      if (isByteSwapped) uc1.bswap();

surrogatePair:
      if (!uc1.isTrailSurrogate()) { err = ERR_STRING_INVALID_UTF16; goto end; }

      dstCur[0] = uc0;
      dstCur[1] = uc1;
      dstCur += 2;
      srcCur += 4;
    }
    else
    {
notSurrogatePair:
      // BOM support.
      if (uc0.isBomSwapped())
      {
        isByteSwapped = !isByteSwapped;
      }
      else if (uc0.isTrailSurrogate())
      {
        err = ERR_STRING_INVALID_UTF16;
        goto end;
      }
      else
      {
        *dstCur++ = uc0;
      }

      srcCur += 2;
    }
  }

  // We need to check if input was truncated or not. Ideally srcCur should
  // be srcEnd.
  if (srcCur != srcEnd)
  {
    // Different behavior if state is set or not.
    if (state)
    {
      sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
      memcpy(state->buffer, srcCur, bufSize);
      state->count = (uint32_t)bufSize;
    }
    else
    {
      err = ERR_STRING_TRUNCATED;
    }
  }

end:
  if (state) state->setBomSwapped(isByteSwapped);

  dst.xFinalize(dstCur);
  return err;
}

static TextCodec::Engine* UTF16Codec_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new(std::nothrow) UTF16Codec(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - UCS2Codec]
// ============================================================================

// UCS2 encoding is still used in embedded devices and in Win2000.

struct FOG_HIDDEN UCS2Codec : public TextCodec::Engine
{
  UCS2Codec(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const;
  virtual err_t appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const;
};

UCS2Codec::UCS2Codec(uint32_t code, uint32_t flags, const char* mime) :
  TextCodec::Engine(code, flags, mime, NULL)
{
}

err_t UCS2Codec::appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  // Length initialization and check.
  if (length == DETECT_LENGTH) length = StringUtil::len(src);
  if (length == 0) return ERR_OK;

  // Source buffer.
  const Char* srcCur = src;
  const Char* srcEnd = src + length;

  // Destination buffer.
  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = (length * 2) + 2;

  err_t err = dst.grow(growSize);
  if (err) return err;

  uint16_t* dstCur = reinterpret_cast<uint16_t*>(dst.getXData() + initSize);

  // Byte swapping.
  bool isByteSwapped = (flags & TextCodec::IsByteSwapped) != 0;

  // Replacer.
  ByteArray replaceBuffer;
  if (replacer == NULL) replacer = defaultReplacer;

  // Characters.
  Char uc0;
  Char uc1;

  if (state && state->count == 2)
  {
    uc0 = reinterpret_cast<uint16_t*>(state->buffer)[0];
    state->count = 0;
    goto surrogateTrail;
  }

loop:
  while (srcCur != srcEnd)
  {
    uc0 = *srcCur++;
    if (uc0.isLeadSurrogate())
    {
      // Incomplete surrogate pair.
      if (srcCur == srcEnd)
      {
        if (!state) { err = ERR_STRING_TRUNCATED; goto end; }
        reinterpret_cast<uint16_t*>(state->buffer)[0] = uc0;
        state->count = 2;
        goto end;
      }

surrogateTrail:
      uc1 = *srcCur++;
      if (!uc1.isTrailSurrogate()) { err = ERR_STRING_INVALID_UTF16; goto end; }

      {
        uint32_t uc = Char::fromSurrogate(uc0, uc1);
        sysuint_t dl;
        sysuint_t rl;
        if ((err = replacer(replaceBuffer, uc))) goto end;

        // Need to finalize dst, append and reserve for next appending.
        dst.xFinalize(reinterpret_cast<char*>(dstCur));

        dl = dst.getLength();
        rl = replaceBuffer.getLength();

        if ((err = dst.grow(rl + (sysuint_t)(srcEnd - srcCur) * 2))) return err;
        dstCur = reinterpret_cast<uint16_t*>(dst.getXData() + dl);

        StringUtil::copy(reinterpret_cast<Char*>(dstCur), replaceBuffer.getData(), dl);
        dstCur += rl;
      }
    }
    else
    {
      *dstCur++ = uc0;
    }
  }

end:
  dst.xFinalize(reinterpret_cast<char*>(dstCur));

  // Byte swapping.
  if (isByteSwapped)
  {
    uint16_t* dstEnd = dstCur;
    dstCur = reinterpret_cast<uint16_t*>(dst.getXData() + initSize);
    while (dstCur != dstEnd) { dstCur[0] = Memory::bswap16(dstCur[0]); dstCur++; }
  }

  return err;
}

err_t UCS2Codec::appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
  // Length initialization and check.
  if (size == DETECT_LENGTH) size = StringUtil::len(reinterpret_cast<const Char*>(src)) << 1;
  if (size == 0) return ERR_OK;

  // Source Buffer.
  const uint8_t* srcCur = reinterpret_cast<const uint8_t*>(src);
  const uint8_t* srcEnd = srcCur + (size);
  const uint8_t* srcEndM2 = srcCur + (size) - 2;

  // Destination Buffer.
  sysuint_t oldStateSize = 0;
  sysuint_t growSize = (size >> 1) + 2;

  err_t err = dst.reserve(dst.getLength() + growSize);
  if (err) return err;

  Char* dstCur = dst.getXData() + dst.getLength();

  // Characters.
  Char uc0;

  // Byte swapping.
  uint32_t isByteSwapped = (state && state->bomInitialized) ? state->bomSwapped : (flags & TextCodec::IsByteSwapped) != 0;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = reinterpret_cast<uint8_t*>(state->buffer);
    sysuint_t bufSize = addToState(state, srcCur, srcEnd);

    if (state->count < 2) return ERR_OK;

    uc0 = reinterpret_cast<const uint16_t*>(bufPtr)[0];
    if (isByteSwapped) uc0.bswap();

    srcCur -= oldStateSize;
    state->count = 0;

    goto processChar;
  }

loop:
  for (;;)
  {
    if (srcCur > srcEndM2) break;

    uc0 = reinterpret_cast<const uint16_t*>(srcCur)[0];
    if (isByteSwapped) uc0.bswap();

processChar:
    if (uc0.isSurrogatePair())
    {
      err = ERR_STRING_INVALID_UCS2;
      goto end;
    }

    // BOM support.
    if (uc0.isBomSwapped())
    {
      isByteSwapped = !isByteSwapped;
    }
    else
    {
      *dstCur++ = uc0;
    }

    srcCur += 2;
  }

  // We need to check if input was truncated or not. Ideally srcCur should
  // be srcEnd.
  if (srcCur != srcEnd)
  {
    // Different behavior if state is set or not.
    if (state)
    {
      sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
      memcpy(state->buffer, srcCur, bufSize);
      state->count = (uint32_t)bufSize;
    }
    else
    {
      err = ERR_STRING_TRUNCATED;
    }
  }

end:
  if (state) state->setBomSwapped(isByteSwapped);

  dst.xFinalize(dstCur);
  return err;
}

static TextCodec::Engine* UCS2Codec_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new(std::nothrow) UCS2Codec(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - UTF32Codec]
// ============================================================================

struct FOG_HIDDEN UTF32Codec : public TextCodec::Engine
{
  UTF32Codec(uint32_t code, uint32_t flags, const char* mime);

  virtual err_t appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const;
  virtual err_t appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const;
};

UTF32Codec::UTF32Codec(uint32_t code, uint32_t flags, const char* mime) :
  TextCodec::Engine(code, flags, mime, NULL)
{
}

err_t UTF32Codec::appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  // Length initialization and check.
  if (length == DETECT_LENGTH) length = StringUtil::len(src);
  if (length == 0) return ERR_OK;

  // Source buffer.
  const Char* srcCur = src;
  const Char* srcEnd = src + length;

  // Destination buffer.
  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = (length * 4) + 2;

  err_t err = dst.reserve(growSize);
  if (err) return err;

  uint32_t* dstCur = reinterpret_cast<uint32_t*>(dst.getXData() + initSize);

  // Byte swapping.
  bool isByteSwapped = (flags & TextCodec::IsByteSwapped) != 0;

  // Characters.
  Char uc0;
  Char uc1;
  uint32_t uc;

  if (state && state->count == 2)
  {
    uc0 = reinterpret_cast<uint16_t*>(state->buffer)[0];
    state->count = 0;
    goto surrogateTrail;
  }

loop:
  while (srcCur != srcEnd)
  {
    uc0 = *srcCur++;
    if (uc0.isLeadSurrogate())
    {
      // Incomplete surrogate pair.
      if (srcCur == srcEnd)
      {
        if (!state) { err = ERR_STRING_TRUNCATED; goto end; }
        reinterpret_cast<uint16_t*>(state->buffer)[0] = uc0;
        state->count = 2;
        goto end;
      }

surrogateTrail:
      uc1 = *srcCur++;
      if (!uc1.isTrailSurrogate()) { err = ERR_STRING_INVALID_UTF16; goto end; }

      uc = Char::fromSurrogate(uc0, uc1);
    }
    else
    {
      uc = uc0;
    }

    if (isByteSwapped) uc = Memory::bswap32(uc);
    *dstCur++ = uc;
  }

end:
  dst.xFinalize(reinterpret_cast<char*>(dstCur));
  return err;
}

err_t UTF32Codec::appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
  // Length initialization and check.
  if (size == DETECT_LENGTH) size = StringUtil::len(reinterpret_cast<const uint32_t*>(src)) << 3;
  if (size == 0) return ERR_OK;

  // Source Buffer.
  const uint8_t* srcCur = reinterpret_cast<const uint8_t*>(src);
  const uint8_t* srcEnd = srcCur + (size);
  const uint8_t* srcEndM4 = srcCur + (size) - 4;

  // Destination Buffer.
  sysuint_t oldStateSize = 0;

  sysuint_t initSize = dst.getLength();
  sysuint_t growSize = (size >> 1) + 2;

  err_t err = dst.grow(growSize);
  if (err) return err;

  Char* dstCur = dst.getXData() + initSize;

  // Characters.
  uint32_t uc;

  // Byte swapping.
  uint32_t isByteSwapped = (state && state->bomInitialized) ? state->bomSwapped : (flags & TextCodec::IsByteSwapped) != 0;

  if (state && (oldStateSize = state->count))
  {
    const uint8_t* bufPtr = reinterpret_cast<uint8_t*>(state->buffer);
    sysuint_t bufSize = addToState(state, srcCur, srcEnd);

    if (state->count < 4) return ERR_OK;

    uc = reinterpret_cast<const uint32_t*>(bufPtr)[0];
    if (isByteSwapped) uc = Memory::bswap32(uc);

    srcCur -= oldStateSize;
    state->count = 0;

    goto processChar;
  }

loop:
  for (;;)
  {
    if (srcCur > srcEndM4) break;

    uc = reinterpret_cast<const uint32_t*>(srcCur)[0];
    if (isByteSwapped) uc = Memory::bswap32(uc);

processChar:
    if (uc > UNICODE_LAST || (uc <= 0xFFFF && Char::isSurrogatePair((uint16_t)uc)))
    {
      err = ERR_STRING_INVALID_CHAR;
      goto end;
    }

    // BOM support.
    if (uc == UTF32_BOM_Swapped)
    {
      isByteSwapped = !isByteSwapped;
    }
    else if (uc >= 0x10000)
    {
      Char::toSurrogatePair(uc, &dstCur[0]._ch, &dstCur[1]._ch);
      dstCur += 2;
    }
    else
    {
      *dstCur++ = uc;
    }

    srcCur += 4;
  }

  // We need to check if input was truncated or not. Ideally srcCur should
  // be srcEnd.
  if (srcCur != srcEnd)
  {
    // Different behavior if state is set or not.
    if (state)
    {
      sysuint_t bufSize = (sysuint_t)(srcEnd - srcCur);
      memcpy(state->buffer, srcCur, bufSize);
      state->count = (uint32_t)bufSize;
    }
    else
    {
      err = ERR_STRING_TRUNCATED;
    }
  }

end:
  if (state) state->setBomSwapped(isByteSwapped);

  dst.xFinalize(dstCur);
  return err;
}

static TextCodec::Engine* UTF32Codec_create(uint32_t code, uint32_t flags, const char* mime, void*)
{
  return new(std::nothrow) UTF32Codec(code, flags, mime);
}

// ============================================================================
// [Fog::TextCodec - Classes]
// ============================================================================

struct TextCodec_Class
{
  typedef TextCodec::Engine* (*CreateFn)(uint32_t code, uint32_t flags, const char* mime, void* table);

  CreateFn create;
  const char* mime;
  uint32_t code;
  uint32_t flags;
  void* tables;
};

static const TextCodec_Class TextCodec_class[] =
{
  { NullCodec_create, "NONE\000",
    TextCodec::None, TextCodec::IsNull, NULL },
  { UTF8Codec_create, "UTF-8\000",
    TextCodec::UTF8, TextCodec::IsUnicode | TextCodec::Is8Bit | TextCodec::IsVariableSize, NULL },
#if FOG_BYTE_ORDER == FOG_LITTLE_ENDIAN
  { UTF16Codec_create, "UTF-16LE\000" "UTF-16\000",
    TextCodec::UTF16LE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize, NULL },
  { UTF16Codec_create, "UTF-16BE\000",
    TextCodec::UTF16BE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize | TextCodec::IsByteSwapped, NULL },
  { UTF32Codec_create, "UTF-32LE\000" "UTF-32\000" "UCS-4LE\000" "UCS-4\000",
    TextCodec::UTF32LE, TextCodec::IsUnicode | TextCodec::Is32Bit, NULL },
  { UTF32Codec_create, "UTF-32BE\000",
    TextCodec::UTF32BE, TextCodec::IsUnicode | TextCodec::Is32Bit | TextCodec::IsByteSwapped, NULL },
  { UCS2Codec_create, "UCS-2LE\000" "UCS-2\000",
    TextCodec::UCS2LE, TextCodec::IsUnicode | TextCodec::Is16Bit, NULL },
  { UCS2Codec_create, "UCS-2BE\000",
    TextCodec::UCS2BE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsByteSwapped, NULL },
#else
  { UTF16Codec_create, "UTF-16BE\000" "UTF-16\000",
    TextCodec::UTF16BE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize, NULL },
  { UTF16Codec_create, "UTF-16LE\000",
    TextCodec::UTF16LE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsVariableSize | TextCodec::IsByteSwapped, NULL },
  { UTF32Codec_create, "UTF-32BE\000" "UTF-32\000" "UCS-4BE\000" "UCS-4\000",
    TextCodec::UTF32BE, TextCodec::IsUnicode | TextCodec::Is32Bit, NULL },
  { UTF32Codec_create, "UTF-32LE\000" "UCS-4LE\000",
    TextCodec::UTF32LE, TextCodec::IsUnicode | TextCodec::Is32Bit | TextCodec::IsByteSwapped, NULL },
  { UCS2Codec_create, "UCS-2BE\000" "UCS-2\000",
    TextCodec::UCS2BE, TextCodec::IsUnicode | TextCodec::Is16Bit  , NULL },
  { UCS2Codec_create, "UCS-2LE\000",
    TextCodec::UCS2LE, TextCodec::IsUnicode | TextCodec::Is16Bit | TextCodec::IsByteSwapped, NULL },
#endif // FOG_BYTE_ORDER
  { _8BitCodec_create, "ISO-8859-1\000" "8859-1\000" "LATIN1\000" "L1\000" "ISO-IR-100\000" "CP819\000" "IBM819\000" "819\000",
    TextCodec::ISO8859_1, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_1 },
  { _8BitCodec_create, "ISO-8859-2\000" "8859-2\000" "LATIN2\000" "L2\000" "ISO-IR-101\000",
    TextCodec::ISO8859_2, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_2 },
  { _8BitCodec_create, "ISO-8859-3\000" "8859-3\000" "LATIN3\000" "L3\000" "ISO-IR-109\000",
    TextCodec::ISO8859_3, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_3 },
  { _8BitCodec_create, "ISO-8859-4\000" "8859-4\000" "LATIN4\000" "L4\000" "ISO-IR-110\000",
    TextCodec::ISO8859_4, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_4 },
  { _8BitCodec_create, "ISO-8859-5\000" "8859-5\000" "CYRILLIC\000" "ISO-IR-144\000",
    TextCodec::ISO8859_5, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_5 },
  { _8BitCodec_create, "ISO-8859-6\000" "8859-6\000" "ISO-8859-6-I\000" "ECMA-114\000" "ASMO-708\000" "ARABIC\000" "ISO-IR-127\000",
    TextCodec::ISO8859_6, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_6 },
  { _8BitCodec_create, "ISO-8859-7\000" "8859-7\000" "ECMA-118\000" "GREEK\000" "ISO-IR-126\000",
    TextCodec::ISO8859_7, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_7 },
  { _8BitCodec_create, "ISO-8859-8\000" "8859-8\000" "ISO-8859-8-I\000" "ISO-IR-138\000" "HEBREW\000",
    TextCodec::ISO8859_8, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_8 },
  { _8BitCodec_create, "ISO-8859-9\000" "8859-9\000" "ISO-IR-148\000" "LATIN5\000" "L5\000",
    TextCodec::ISO8859_9, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_9 },
  { _8BitCodec_create, "ISO-8859-10\000" "8859-10\000" "ISO-IR-157\000" "LATIN6\000" "L6\000" "ISO-8859-10:1992\000",
    TextCodec::ISO8859_10, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_10 },
  { _8BitCodec_create, "ISO-8859-11\000" "8859-11\000" "TIS-620\000",
    TextCodec::ISO8859_11, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_11 },
  { _8BitCodec_create, "ISO-8859-13\000" "8859-13\000",
    TextCodec::ISO8859_13, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_13 },
  { _8BitCodec_create, "ISO-8859-14\000" "8859-14\000" "ISO-IR-199\000" "LATIN8\000" "L8\000" "ISO-CELTIC\000",
    TextCodec::ISO8859_14, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_14 },
  { _8BitCodec_create, "ISO-8859-16\000" "8859-16\000" "ISO-IR-226\000" "LATIN10\000" "L10\000",
    TextCodec::ISO8859_16, TextCodec::Is8Bit, (void*)TextCodec_Table_ISO_8859_16 },
  { _8BitCodec_create, "CP850\000" "IBM850\000" "850\000",
    TextCodec::CP850, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_850 },
  { _8BitCodec_create, "CP866\000" "IBM866\000" "866\000",
    TextCodec::CP866, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_866 },
  { _8BitCodec_create, "CP874\000" "IBM874\000" "874\000",
    TextCodec::CP874, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_874 },
  { _8BitCodec_create, "CP1250\000" "WINDOWS-1250\000" "1250\000",
    TextCodec::CP1250, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1250 },
  { _8BitCodec_create, "CP1251\000" "WINDOWS-1251\000" "1251\000",
    TextCodec::CP1251, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1251 },
  { _8BitCodec_create, "CP1252\000" "WINDOWS-1252\000" "1252\000",
    TextCodec::CP1252, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1252 },
  { _8BitCodec_create, "CP1253\000" "WINDOWS-1253\000" "1253\000",
    TextCodec::CP1253, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1253 },
  { _8BitCodec_create, "CP1254\000" "WINDOWS-1254\000" "1254\000",
    TextCodec::CP1254, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1254 },
  { _8BitCodec_create, "CP1255\000" "WINDOWS-1255\000" "1255\000",
    TextCodec::CP1255, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1255 },
  { _8BitCodec_create, "CP1256\000" "WINDOWS-1256\000" "1256\000",
    TextCodec::CP1256, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1256 },
  { _8BitCodec_create, "CP1257\000" "WINDOWS-1257\000" "1257\000",
    TextCodec::CP1257, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1257 },
  { _8BitCodec_create, "CP1258\000" "WINDOWS-1258\000" "1258\000",
    TextCodec::CP1258, TextCodec::Is8Bit, (void*)TextCodec_Table_CP_1258 },
  { _8BitCodec_create, "APPLE-ROMAN\000",
    TextCodec::AppleRoman, TextCodec::Is8Bit, (void*)TextCodec_Table_APPLE_ROMAN },
  { _8BitCodec_create, "KOI8-R\000",
    TextCodec::KOI8R, TextCodec::Is8Bit, (void*)TextCodec_Table_KOI8R },
  { _8BitCodec_create, "KOI8-U\000" "KOI8-RU\000",
    TextCodec::KOI8U, TextCodec::Is8Bit, (void*)TextCodec_Table_KOI8U },
  { _8BitCodec_create, "WINSAMI2\000" "WS2\000",
    TextCodec::WinSami2, TextCodec::Is8Bit, (void*)TextCodec_Table_WINSAMI_2 },
  { _8BitCodec_create, "ROMAN8\000" "HP-ROMAN8\000",
    TextCodec::Roman8, TextCodec::Is8Bit, (void*)TextCodec_Table_ROMAN_8 },
  { _8BitCodec_create, "ARMSCII-8\000",
    TextCodec::Armscii8, TextCodec::Is8Bit, (void*)TextCodec_Table_ARMSCII_8 },
  { _8BitCodec_create, "GEORGIAN-ACADEMY\000",
    TextCodec::GeorgianAcademy, TextCodec::Is8Bit, (void*)TextCodec_Table_GEORGIAN_ACADEMY },
  { _8BitCodec_create, "GEORGIAN-PS\000",
    TextCodec::GeorgianPS, TextCodec::Is8Bit, (void*)TextCodec_Table_GEORGIAN_PS }
};

// MIME searching
//
// First string in mime is encoding name, all other strings are aliases
// zero terminator means that string ends, but two zero terminators means
// that aliases list ends.
//
// Mime compare function that ignores case, ' ', '-' and '_'.
static bool mimeCompare(const char* mime, const char* str, sysuint_t length)
{
  const char* strCur;
  const char* strEnd = str + length;

__repeat_all:
  strCur = str;
  for (;;)
  {
    char ch;
    char mime_ch;

    // Get string character
__repeat_string:
    ch = (strCur == strEnd) ? 0 : (char)Byte::toLower(*strCur++);
    if (ch == '_'|| ch == '-' || ch == ' ') goto __repeat_string;

    // Get mime character
__repeat_mime:
    mime_ch = Byte::toLower(*mime++);
    if (mime_ch == '_'|| mime_ch == '-' || mime_ch == ' ') goto __repeat_mime;

    if (ch != mime_ch)
    {
      // NOT EQUAL - Go to end of mime string
      while (*mime) mime++;

      // Not two zero terminators => Try next alias
      if (*++mime) goto __repeat_all;

      // Not found in this MIME and ALIASes
      return false;
    }
    if (!ch)
      // EQUAL
      return true;
  }
}

static const char* getCodeset(void)
{
#if defined(FOG_OS_WINDOWS)
  // Windows hasn't nl_langinto(CODESET), but we can use setlocale()
  // that returns "Language_Country.CODEPAGE
  const char* codeset = setlocale(LC_ALL, NULL); // get locale...
  const char* chr = strchr(codeset, '.');
  if (chr)
  {
    // Text codec knows 1250, 1251, ...
    return chr + 1;
  }
  else
  {
    fog_stderr_msg("Fog::TextCodec", "getCodesetPrivate", "Can't get system codeset\n");
    return "ISO-8859-1"; /* sorry */
  }
#else
  // Must be called after setlocale("") that's called from Core/Std.cpp
  return nl_langinfo(CODESET);
#endif // FOG_OS_WINDOWS
}

static TextCodec::Engine* deviceInstances[TextCodec::Invalid];

static TextCodec::Engine* getEngine(uint32_t code)
{
  if (code >= TextCodec::Invalid) code = 0;

  TextCodec::Engine** _ptr = &deviceInstances[code];
  TextCodec::Engine* v = AtomicOperation<TextCodec::Engine*>::get(_ptr);

  enum { CREATING_NOW = 1 };

  // Already created, just return it
  if (v != NULL && v != (TextCodec::Engine*)CREATING_NOW) goto ret;

  // Create instance
  if (AtomicOperation<TextCodec::Engine*>::cmpXchg(_ptr,
    (TextCodec::Engine*)NULL,
    (TextCodec::Engine*)CREATING_NOW))
  {
    const TextCodec_Class &c = TextCodec_class[code];
    v = c.create(c.code, c.flags, c.mime, c.tables);
    AtomicOperation<TextCodec::Engine*>::set(_ptr, v);
    goto ret;
  }

  // Race.
  // This is very rare situation, but it can happen!
  while ((v = AtomicOperation<TextCodec::Engine*>::get(_ptr)) == (TextCodec::Engine*)CREATING_NOW)
  {
    Thread::_yield();
  }

ret:
  v->ref();
  return v;
}

// ============================================================================
// [Fog::TextCodec]
// ============================================================================

TextCodec::TextCodec() :
  _d(((TextCodec*)_codecs)[BuiltInNull]._d->ref())
{
}

TextCodec::TextCodec(const TextCodec& other) :
  _d(other._d->ref())
{
}

TextCodec::TextCodec(Engine* d) :
  _d(d)
{
}

TextCodec::~TextCodec()
{
  _d->deref();
}

// [From]

TextCodec TextCodec::fromCode(uint32_t code)
{
  return TextCodec(getEngine(code));
}

TextCodec TextCodec::fromMime(const char* mime)
{
  sysuint_t i;
  sysuint_t mimeLength = strlen(mime);

  for (i = 0; i != FOG_ARRAY_SIZE(TextCodec_class); i++)
  {
    if (mimeCompare(TextCodec_class[i].mime, mime, mimeLength)) break;
  }

  return TextCodec::fromCode((uint32_t)(i < FOG_ARRAY_SIZE(TextCodec_class) ? i : 0));
}

TextCodec TextCodec::fromMime(const String& mime)
{
  if (mime.getLength() > 255) return TextCodec();

  char mime8[256];
  StringUtil::unicodeToLatin1(mime8, mime.getData(), mime.getLength());
  mime8[mime.getLength()] = '\0';

  return fromMime(mime8);
}

struct BogetMData
{
  uint32_t code;
  uint32_t size;
  uint8_t data[4];
};

TextCodec TextCodec::fromBom(const void* data, sysuint_t length)
{
  static const BogetMData bogetMData[] =
  {
    { UTF8   , 3, { 0xEF, 0xBB, 0xBF       } },
    { UTF16BE, 2, { 0xFE, 0xFF             } },
    { UTF16LE, 2, { 0xFF, 0xFE             } },
    { UTF32BE, 4, { 0x00, 0x00, 0xFE, 0xFF } },
    { UTF32LE, 4, { 0xFF, 0xFE, 0x00, 0x00 } }
  };

  uint32_t code = None;

  for (sysuint_t i = 0; i != FOG_ARRAY_SIZE(bogetMData); i++)
  {
    if (length >= bogetMData[i].size && memcmp(data, bogetMData[i].data, bogetMData[i].size) == 0)
    { code = bogetMData[i].code; break; }
  }

  return TextCodec::fromCode(code);
}

void TextCodec::free()
{
  atomicPtrXchg(&_d, ((TextCodec *)_codecs)[BuiltInNull]._d->ref())->deref();
}

TextCodec& TextCodec::operator=(const TextCodec& other)
{
  atomicPtrXchg(&_d, other._d->ref())->deref();
  return *this;
}

err_t TextCodec::setCode(uint32_t code)
{
  err_t err = ERR_OK;
  if (code >= Invalid) { code = 0; err = ERR_STRING_INVALID_CODEC; }

  atomicPtrXchg(&_d, getEngine(code))->deref();
  return err;
}

err_t TextCodec::setMime(const char* mime)
{
  *this = TextCodec::fromMime(mime);
  return _d->code == None ? (err_t)ERR_STRING_INVALID_CODEC : (err_t)ERR_OK;
}

err_t TextCodec::setMime(const String& mime)
{
  *this = TextCodec::fromMime(mime);
  return _d->code == None ? (err_t)ERR_STRING_INVALID_CODEC : (err_t)ERR_OK;
}

// FromUtf16/32

err_t TextCodec::fromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  dst.clear();
  return _d->appendFromUnicode(dst, src, length, replacer, state);
}

err_t TextCodec::fromUnicode(ByteArray& dst, const String& src, Replacer replacer, State* state) const
{
  dst.clear();
  return _d->appendFromUnicode(dst, src.getData(), src.getLength(), replacer, state);
}

// AppendFromUtf16/32

err_t TextCodec::appendFromUnicode(ByteArray& dst, const Char* src, sysuint_t length, Replacer replacer, State* state) const
{
  return _d->appendFromUnicode(dst, src, length, replacer, state);
}

err_t TextCodec::appendFromUnicode(ByteArray& dst, const String& src, Replacer replacer, State* state) const
{
  return _d->appendFromUnicode(dst, src.getData(), src.getLength(), replacer, state);
}

// ToUtf16/32

err_t TextCodec::toUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
  dst.clear();
  return _d->appendToUnicode(dst, src, size, state);
}

err_t TextCodec::toUnicode(String& dst, const ByteArray& src, State* state) const
{
  dst.clear();
  return _d->appendToUnicode(dst, src.getData(), src.getLength(), state);
}

// AppendToUtf16/32

err_t TextCodec::appendToUnicode(String& dst, const void* src, sysuint_t size, State* state) const
{
  return _d->appendToUnicode(dst, src, size, state);
}

err_t TextCodec::appendToUnicode(String& dst, const ByteArray& src, State* state) const
{
  return _d->appendToUnicode(dst, src.getData(), src.getLength(), state);
}

} // Fog namespace

// ============================================================================
// [Library Initializers]
// ============================================================================

FOG_INIT_DECLARE err_t fog_textcodec_init(void)
{
  using namespace Fog;

  Memory::zero(deviceInstances, sizeof(void*) * TextCodec::Invalid);

  TextCodec* addr = (TextCodec*)TextCodec::_codecs;

  // Initialize null text codec.
  new (&addr[TextCodec::BuiltInNull]) 
    TextCodec(TextCodec::fromCode(TextCodec::None));

  // Initialize ASCII text codec.
  new (&addr[TextCodec::BuiltInAscii]) 
    TextCodec(TextCodec::fromCode(TextCodec::ISO8859_1));
  
  // Initialize local 8-bit text codec. If there was problem to initialize it,
  // we will use ASCII one.
  new (&addr[TextCodec::BuiltInLocal]) 
    TextCodec(TextCodec::fromMime(getCodeset()));
  if (addr[TextCodec::BuiltInLocal].isNull())
    addr[TextCodec::BuiltInLocal] = addr[TextCodec::BuiltInAscii];

  // Initialize UTF-8 text codec.
  new (&addr[TextCodec::BuiltInUTF8]) 
    TextCodec(TextCodec::fromCode(TextCodec::UTF8));
  
  // Initialize UTF-16 text codec.
  new (&addr[TextCodec::BuiltInUTF16]) 
    TextCodec(TextCodec::fromCode(TextCodec::UTF16));
  
  // Initialize UTF-32 text codec.
  new (&addr[TextCodec::BuiltInUTF32]) 
    TextCodec(TextCodec::fromCode(TextCodec::UTF32));

  return ERR_OK;
}

FOG_INIT_DECLARE void fog_textcodec_shutdown(void)
{
  using namespace Fog;

  TextCodec* addr = (TextCodec*)TextCodec::_codecs;

  addr[TextCodec::BuiltInNull].~TextCodec();
  addr[TextCodec::BuiltInAscii].~TextCodec();
  addr[TextCodec::BuiltInLocal].~TextCodec();
  addr[TextCodec::BuiltInUTF8].~TextCodec();
  addr[TextCodec::BuiltInUTF16].~TextCodec();
  addr[TextCodec::BuiltInUTF32].~TextCodec();

  for (sysuint_t i = 0; i != FOG_ARRAY_SIZE(deviceInstances); i++)
  {
    if (deviceInstances[i]) deviceInstances[i]->deref();
  }
}
