// [Fog-Core]
//
// [License]
// MIT, See COPYING file in package

// [Guard]
#ifndef _FOG_CORE_GLOBAL_ENUMUI_H
#define _FOG_CORE_GLOBAL_ENUMUI_H

// [Dependencies]
#include <Fog/Core/Global/EnumCore.h>
#include <Fog/Core/Global/EnumG2d.h>

namespace Fog {

//! @addtogroup Fog_Core_Global
//! @{

// NOTE: All UI_ENGINE_ constants are specific to the UIEngine implementation
// and used mainly by @ref UIEngine and @ref UIEngineWindow themselves. The
// standard UI code should use constants without UI_ENGINE prefix unless
// working directly with @ref UIEngine or @ref UIEngineWindow.

// ============================================================================
// [Fog::UI_ENGINE_BUFFER]
// ============================================================================

//! @brief UIEngineWindow double-buffer type.
enum UI_ENGINE_BUFFER
{
  //! @brief No double-buffer yet.
  UI_ENGINE_BUFFER_NONE = 0,

  // --------------------------------------------------------------------------
  // [UI/Windows Support]
  // --------------------------------------------------------------------------
  
  //! @brief Double-buffer is using DIBSECTION (UI/Windows).
  UI_ENGINE_BUFFER_WIN_DIB = 1,

  // --------------------------------------------------------------------------
  // [UI/Mac Support]
  // --------------------------------------------------------------------------

  //! @brief Double-buffer is using CGImageRef (UI/Mac).
  UI_ENGINE_BUFFER_MAC_CGIMAGE  = 8,
  
  // --------------------------------------------------------------------------
  // [UI/X11 Support]
  // --------------------------------------------------------------------------

  //! @brief Double-buffer is XImage (UI/X11).
  UI_ENGINE_BUFFER_X11_XIMAGE = 16,

  //! @brief Double-buffer is XSHM-Image (UI/X11).
  UI_ENGINE_BUFFER_X11_XSHMIMAGE = 17
};

// ============================================================================
// [Fog::UI_ENGINE_EVENT]
// ============================================================================

//! @brief @ref UIEngine and @ref UIEngineWindow event code.
//!
//! @note This is low-level event code, which comes directly from the backend
//! windowing system. Please do not use these engine events, rather use the UI
//! toolkit events.
enum UI_ENGINE_EVENT
{
  //! @brief Never dispatched, used internally.
  UI_ENGINE_EVENT_NONE = 0,

  UI_ENGINE_EVENT_CREATE = 1,
  UI_ENGINE_EVENT_DESTROY = 2,

  UI_ENGINE_EVENT_CLOSE = 3,

  UI_ENGINE_EVENT_ENABLE = 4,
  UI_ENGINE_EVENT_DISABLE = 5,

  UI_ENGINE_EVENT_SHOW = 6,
  UI_ENGINE_EVENT_HIDE = 7,
  UI_ENGINE_EVENT_GEOMETRY = 9,

  UI_ENGINE_EVENT_FOCUS_IN = 10,
  UI_ENGINE_EVENT_FOCUS_OUT = 11,

  UI_ENGINE_EVENT_KEY_DOWN = 12,
  UI_ENGINE_EVENT_KEY_UP = 13,
  UI_ENGINE_EVENT_KEY_PRESS = 14,

  UI_ENGINE_EVENT_MOUSE_IN = 16,
  UI_ENGINE_EVENT_MOUSE_OUT = 17,
  UI_ENGINE_EVENT_MOUSE_MOVE = 18,

  UI_ENGINE_EVENT_MOUSE_DOWN = 19,
  UI_ENGINE_EVENT_MOUSE_UP = 20,

  UI_ENGINE_EVENT_MOUSE_CLICK = 21,
  UI_ENGINE_EVENT_MOUSE_DBL_CLICK = 22,

  UI_ENGINE_EVENT_WHEEL_UP = 24,
  UI_ENGINE_EVENT_WHEEL_DOWN = 25,
  UI_ENGINE_EVENT_WHEEL_LEFT = 26,
  UI_ENGINE_EVENT_WHEEL_RIGHT = 27,

  UI_ENGINE_EVENT_UPDATE = 30,
  UI_ENGINE_EVENT_PAINT = 31
};

// ============================================================================
// [Fog::UI_ENGINE_EVENT_FLAG]
// ============================================================================

enum UI_ENGINE_EVENT_FLAG
{
  //! @brief Event should be rejected.
  UI_ENGINE_EVENT_FLAG_ACCEPT = 0x40000000,
  //! @brief Event was generated by the system.
  UI_ENGINE_EVENT_FLAG_SYSTEM = 0x80000000
};

// ============================================================================
// [Fog::UI_ENGINE_CHANGED]
// ============================================================================

//! @brief UIEngineWindow changed flags (see @ref UIEngineGeometryEvent).
enum UI_ENGINE_CHANGED
{
  UI_ENGINE_CHANGED_WINDOW_POSITION = 0x01,
  UI_ENGINE_CHANGED_WINDOW_SIZE = 0x02,
  UI_ENGINE_CHANGED_CLIENT_POSITION = 0x04,
  UI_ENGINE_CHANGED_CLIENT_SIZE = 0x08,
  UI_ENGINE_CHANGED_ORIENTATION = 0x10
};

// ============================================================================
// [Fog::UI_ENGINE_MISC]
// ============================================================================

//! @brief Various constants used by @ref UIEngine and @ref UIEngineWindow.
//!
//! @note This is mainly for internal purposes, but visible here so the default
//! values can be safely "modified" to fit into a particular siftware/hardware.
enum UI_ENGINE_MISC
{
  UI_ENGINE_MISC_DEFAULT_WHEEL_LINES = 3
};

// ============================================================================
// [Fog::BUTTON_CODE]
// ============================================================================

//! @brief Mouse button / wheel code.
enum BUTTON_CODE
{
  //! @brief No button, invalid in some cases.
  BUTTON_NONE = 0x0000,

  //! @brief Left button.
  BUTTON_LEFT = 0x0001,
  //! @brief Middle button.
  BUTTON_MIDDLE = 0x0002,
  //! @brief Right button.
  BUTTON_RIGHT = 0x0004,

  //! @brief X1 button.
  BUTTON_X1 = 0x0008,
  //! @brief X2 button.
  BUTTON_X2 = 0x0010,

  //! @brief Wheel up button.
  BUTTON_WHEEL_UP = 0x1000,
  //! @brief Wheel down button.
  BUTTON_WHEEL_DOWN = 0x2000,
  //! @brief Wheel left button.
  BUTTON_WHEEL_LEFT = 0x4000,
  //! @brief Wheel right button.
  BUTTON_WHEEL_RIGHT = 0x8000
};

// ============================================================================
// [Fog::FOCUS_MASK]
// ============================================================================

//! @brief Focus masks used by @c FOCUS_POLICY
enum FOCUS_MASK
{
  FOCUS_MASK_TAB = 0x00000001,
  FOCUS_MASK_CLICK = 0x00000002,
  FOCUS_MASK_WHEEL = 0x00000004
};

// ============================================================================
// [Fog::FOCUS_POLICY]
// ============================================================================

//! @brief Focus policy.
enum FOCUS_POLICY
{
  FOCUS_POLICY_NONE = 0,
  FOCUS_POLICY_TAB = FOCUS_MASK_TAB,
  FOCUS_POLICY_CLICK = FOCUS_MASK_CLICK,
  FOCUS_POLICY_STRONG = FOCUS_MASK_TAB | FOCUS_MASK_CLICK,
  FOCUS_POLICY_WHEEL = FOCUS_MASK_TAB | FOCUS_MASK_CLICK | FOCUS_MASK_WHEEL
};

// ============================================================================
// [Fog::FOCUS_QUERY]
// ============================================================================

enum FOCUS_QUERY
{
  FOCUS_QUERY_NEXT = 0,
  FOCUS_QUERY_PREVIOUS = 1
};

// ============================================================================
// [Fog::FOCUS_REASON]
// ============================================================================

enum FOCUS_REASON
{
  FOCUS_REASON_NONE = 0,
  FOCUS_REASON_TAB = FOCUS_MASK_TAB,
  FOCUS_REASON_CLICK = FOCUS_MASK_CLICK,
  FOCUS_REASON_WHEEL = FOCUS_MASK_WHEEL
};

// ============================================================================
// [Fog::KEY_CODE]
// ============================================================================

//! @brief Key codes.
enum KEY_CODE
{
  KEY_BACKSPACE            = 8,
  KEY_TAB                  = 9,
  KEY_CLEAR                = 12,
  KEY_ENTER                = 13,
  KEY_PAUSE                = 19,
  KEY_ESC                  = 27,
  KEY_SPACE                = 32,
  KEY_EXCLAIM              = 33,
  KEY_DOUBLEQUOTE          = 34,
  KEY_HASH                 = 35,
  KEY_DOLLAR               = 36,
  KEY_PERCENT              = 37,
  KEY_AMPERSAND            = 38,
  KEY_QUOTE                = 39,
  KEY_LEFT_PAREN           = 40,
  KEY_RIGHT_PAREN          = 41,
  KEY_ASTERISK             = 42,
  KEY_PLUS                 = 43,
  KEY_COMMA                = 44,
  KEY_MINUS                = 45,
  KEY_PERIOD               = 46,
  KEY_SLASH                = 47,
  KEY_0                    = 48,
  KEY_1                    = 49,
  KEY_2                    = 50,
  KEY_3                    = 51,
  KEY_4                    = 52,
  KEY_5                    = 53,
  KEY_6                    = 54,
  KEY_7                    = 55,
  KEY_8                    = 56,
  KEY_9                    = 57,
  KEY_COLON                = 58,
  KEY_SEMICOLON            = 59,
  KEY_LESS                 = 60,
  KEY_EQUALS               = 61,
  KEY_GREATER              = 62,
  KEY_QUESTION             = 63,
  KEY_AT                   = 64,
  KEY_LEFT_BRACKET         = 91,
  KEY_BACKSLASH            = 92,
  KEY_RIGHT_BRACKET        = 93,
  KEY_CARET                = 94,
  KEY_UNDERSCORE           = 95,
  KEY_BACKQUOTE            = 96,
  KEY_A                    = 97,
  KEY_B                    = 98,
  KEY_C                    = 99,
  KEY_D                    = 100,
  KEY_E                    = 101,
  KEY_F                    = 102,
  KEY_G                    = 103,
  KEY_H                    = 104,
  KEY_I                    = 105,
  KEY_J                    = 106,
  KEY_K                    = 107,
  KEY_L                    = 108,
  KEY_M                    = 109,
  KEY_N                    = 110,
  KEY_O                    = 111,
  KEY_P                    = 112,
  KEY_Q                    = 113,
  KEY_R                    = 114,
  KEY_S                    = 115,
  KEY_T                    = 116,
  KEY_U                    = 117,
  KEY_V                    = 118,
  KEY_W                    = 119,
  KEY_X                    = 120,
  KEY_Y                    = 121,
  KEY_Z                    = 122,
  KEY_LEFT_BRACE           = 123,
  KEY_PIPE                 = 124,
  KEY_RIGHT_BRACE          = 125,
  KEY_TILDE                = 126,
  KEY_DELETE               = 127,
  KEY_KP_0                 = 256,
  KEY_KP_1                 = 257,
  KEY_KP_2                 = 258,
  KEY_KP_3                 = 259,
  KEY_KP_4                 = 260,
  KEY_KP_5                 = 261,
  KEY_KP_6                 = 262,
  KEY_KP_7                 = 263,
  KEY_KP_8                 = 264,
  KEY_KP_9                 = 265,
  KEY_KP_PERIOD            = 266,
  KEY_KP_DIVIDE            = 267,
  KEY_KP_MULTIPLY          = 268,
  KEY_KP_MINUS             = 269,
  KEY_KP_PLUS              = 270,
  KEY_KP_ENTER             = 271,
  KEY_KP_EQUALS            = 272,
  KEY_UP                   = 273,
  KEY_DOWN                 = 274,
  KEY_RIGHT                = 275,
  KEY_LEFT                 = 276,
  KEY_INSERT               = 277,
  KEY_HOME                 = 278,
  KEY_END                  = 279,
  KEY_PAGE_UP              = 280,
  KEY_PAGE_DOWN            = 281,
  KEY_F1                   = 282,
  KEY_F2                   = 283,
  KEY_F3                   = 284,
  KEY_F4                   = 285,
  KEY_F5                   = 286,
  KEY_F6                   = 287,
  KEY_F7                   = 288,
  KEY_F8                   = 289,
  KEY_F9                   = 290,
  KEY_F10                  = 291,
  KEY_F11                  = 292,
  KEY_F12                  = 293,
  KEY_F13                  = 294,
  KEY_F14                  = 295,
  KEY_F15                  = 296,
  KEY_NUM_LOCK             = 300,
  KEY_CAPS_LOCK            = 301,
  KEY_SCROLL_LOCK          = 302,
  KEY_RIGHT_SHIFT          = 303,
  KEY_LEFT_SHIFT           = 304,
  KEY_RIGHT_CTRL           = 305,
  KEY_LEFT_CTRL            = 306,
  KEY_RIGHT_ALT            = 307,
  KEY_LEFT_ALT             = 308,
  KEY_RIGHT_META           = 309,
  KEY_LEFT_META            = 310,
  KEY_LEFT_SUPER           = 311, //!< @brief Left "Windows" key.
  KEY_RIGHT_SUPER          = 312, //!< @brief Right "Windows" key.
  KEY_MODE                 = 313, //!< @brief "Alt Gr" key.
  KEY_HELP                 = 315,
  KEY_PRINT                = 316,
  KEY_SYS_REQ              = 317,
  KEY_BREAK                = 318,
  KEY_MENU                 = 319,
  KEY_POWER                = 320, //!< @brief Mac power key.
  KEY_EURO                 = 321, //!< @brief Euro key.
  KEY_ALPHA                = 322, //!< @brief Select letters on a numeric keypad.

  KEY_COMPOSE              = 400,

  KEY_COUNT                = 401,
  KEY_MASK                 = 0x1FFFFFFF,

  // Modifiers mapped to key
  KEY_SHIFT                = (1 << 29),
  KEY_CTRL                 = (1 << 30),
  KEY_ALT                  = (1 << 31)
};

// ============================================================================
// [Fog::MODIFIER_CODE]
// ============================================================================

//! @brief Key modifier codes.
enum MODIFIER_CODE
{
  //! @brief Left shift.
  MODIFIER_LEFT_SHIFT      = 0x0001,
  //! @brief Right shift.
  MODIFIER_RIGHT_SHIFT     = 0x0002,
  //! @brief Left or right shift, use if (mod & MODIFIER_SHIFT).
  MODIFIER_SHIFT           = 0x0003,

  //! @brief Left control.
  MODIFIER_LEFT_CTRL       = 0x0004,
  //! @brief Right control.
  MODIFIER_RIGHT_CTRL      = 0x0008,
  //! @brief Left or right control.
  MODIFIER_CTRL            = 0x000C,

  //! @brief Left alt.
  MODIFIER_LEFT_ALT        = 0x0010,
  //! @brief Right alt.
  MODIFIER_RIGHT_ALT       = 0x0020,
  //! @brief Left or right alt.
  MODIFIER_ALT             = 0x0030,

  //! @brief Left meta.
  MODIFIER_LEFT_META       = 0x0040,
  //! @brief Right meta.
  MODIFIER_RIGHT_META      = 0x0080,
  //! @brief Left or right meta.
  MODIFIER_META            = 0x00C0,

  //! @brief Left, Shift, Alt and Meta masks.
  MODIFIER_MASK            = 0x00FF,

  //! @brief Num lock.
  MODIFIER_NUM             = 0x1000,
  //! @brief Caps lock.
  MODIFIER_CAPS            = 0x2000,
  //! @brief Mode.
  MODIFIER_MODE            = 0x4000
};

// ============================================================================
// [Fog::ORIENTATION]
// ============================================================================

//! @brief Orientation of UI component (@ref UIEngineWindow, or @ref UIItem).
enum ORIENTATION
{
  //! @brief Horizontal orientation.
  ORIENTATION_HORIZONTAL = 0,
  //! @brief Vertical orientation.
  ORIENTATION_VERTICAL = 1
};

// ============================================================================
// [Fog::WINDOW_HINT]
// ============================================================================

enum WINDOW_HINT
{
  WINDOW_HINT_HAS_SYSTEM_MENU  = 0x00000001,
  WINDOW_HINT_HAS_MAXIMIZE     = 0x00000002,
  WINDOW_HINT_HAS_MINIMIZE     = 0x00000004,
  WINDOW_HINT_HAS_CLOSE        = 0x00000008,
  WINDOW_HINT_HAS_CONTEXT_HELP = 0x00000010,
  WINDOW_HINT_POPUP            = 0x00000020,
  WINDOW_HINT_FIXED_POS        = 0x00000040,
  WINDOW_HINT_FIXED_SIZE       = 0x00000080,

  WINDOW_HINT_ALWAYS_ON_TOP    = 0x00001000,
  WINDOW_HINT_COMPOSITE        = 0x00002000,
  WINDOW_HINT_FRAMELESS        = 0x00004000,
  WINDOW_HINT_FULLSCREEN       = 0x00008000,

  // --------------------------------------------------------------------------
  // [Win Specific]
  // --------------------------------------------------------------------------

  // --------------------------------------------------------------------------
  // [Mac Specific]
  // --------------------------------------------------------------------------

  // --------------------------------------------------------------------------
  // [X11 Specific]
  // --------------------------------------------------------------------------

  WINDOW_HINT_X11_OVERRIDE_REDIRECT = 0x10000000,
  WINDOW_HINT_X11_PROPERTY_ONLY     = 0x20000000
};

// ============================================================================
// [Fog::WINDOW_STATE]
// ============================================================================

enum WINDOW_STATE
{
  WINDOW_STATE_HIDDEN = 0,
  WINDOW_STATE_NORMAL = 1,
  WINDOW_STATE_MAXIMIZED = 2,
  WINDOW_STATE_FULLSCREEN = 3
};

// ============================================================================
// [Fog::WINDOW_TYPE]
// ============================================================================

enum WINDOW_TYPE
{
  WINDOW_TYPE_NORMAL = 0,
  WINDOW_TYPE_DIALOG = 1,
  WINDOW_TYPE_POPUP = 2,
  WINDOW_TYPE_TOOL = 3,
  WINDOW_TYPE_TOOLTIP = 4,
  WINDOW_TYPE_FRAMELESS = 5,
  WINDOW_TYPE_SPLASH = 6
};

//! @}

} // Fog namespace

// [Guard]
#endif // _FOG_CORE_GLOBAL_ENUMUI_H
